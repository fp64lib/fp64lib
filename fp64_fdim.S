/* Copyright (c) 2019-2020  Uwe Bissinger
   Based on 32bit floating point arithmetic routines which is:
   Copyright (c) 2002  Michael Stumpf  <mistumpf@de.pepperl-fuchs.com>
   Copyright (c) 2006  Dmitry Xmelkov
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions are met:

   * Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in
     the documentation and/or other materials provided with the
     distribution.
   * Neither the name of the copyright holders nor the names of
     contributors may be used to endorse or promote products derived
     from this software without specific prior written permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   POSSIBILITY OF SUCH DAMAGE. */

/* $Id$ */

#if !defined(__AVR_TINY__)

#include "fp64def.h"
#include "asmdef.h"

/* float_64t fp64_fdim (float_64t A, float_64t B);
     The fp64_fdim() function  return max(A-B,0). If x or y or both are NaN,
     NaN is returned.

   Notes:
     * In case 'A == B' subtraction is called to save flash space.
     Contrary it is needed to check 'Inf - Inf'.  And the fp64_sub()
     is fast if both arguments are equal.
 */

FUNCTION fp64_fdim
ENTRY fp64_fdim
  ; sign(A) | sign(B)
	mov	r0, rA7
	or	r0, rB7
	brmi	2f
	
	; A >= 0 and B >= 0
	XCALL _U(__fp64_cpcAB)	; is B > A ? (or: is A-B < 0?)
	cpc	rA7, rB7
	brcs 	3f			; yes, check for NaN
1:	XJMP _U(fp64_sub)	; no ---> A-B > 0, return A-B

	; A < 0 or B < 0 or both < 0
2:	XCALL _U(__fp64_cpcBA)	; is A > B?
	cpc	rB7, rA7
	brcc 1b				; no --> A-B > 0, return A-B
	
	; handle here all cases of A-B < 0
	; before 0 return, check if A or B is NaN
3:	ldi	ZL, 0xf0	; hlo8(Inf)
	ldi	ZH, 0xfe	; hhi8(Inf) after 'lsl'
	lsl	rA7			; get rid of sign of A
	XCALL _U(__fp64_cpc0A5)
	cpc	ZL, rA6
	cpc	ZH, rA7
	brlo	.L_nan
  
	; check B for NaN
	push rB7
	lsl	rB7			; get rid of sign of B			
	XCALL _U(__fp64_cpc0B5)
	cpc	ZL, rB6
	cpc	ZH, rB7
	pop rB7
	brlo	.L_nan
	; neither A nor B are NaN --> return 0
	XJMP	_U(__fp64_zero)

	; A or B is NaN --> fp64_dim(A,B) is NaN
.L_nan:	XJMP	_U(__fp64_nan)
ENDFUNC

#endif /* !defined(__AVR_TINY__) */
